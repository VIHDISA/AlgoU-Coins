class AlgoUCoins:
    def __init__(self):
        self.coins = 0

    def complete_question_assignment(self):
        self.coins += 20

    def complete_assignment(self):
        self.coins += 50  # Bonus for completing all questions in an assignment

    def complete_all_assignments(self):
        self.coins += 150  # Bonus for completing all assignments

    def attempt_question_contest(self, correct=False, submission_attempts=0):
        self.coins += 10  # Coins for attempting the question
        if correct:
            self.coins += 30  # Basic correct answer bonus
            if submission_attempts == 0:
                self.coins += 30
            elif submission_attempts == 1:
                self.coins += 20
            elif submission_attempts == 2:
                self.coins += 10

    def complete_contest(self):
        self.coins += 100  # Bonus for getting all questions right
    
    def complete_almost_all_contest(self, wrong_questions=1):
        if wrong_questions == 1:
            self.coins += 80
        elif wrong_questions == 2:
            self.coins += 60
        # No additional coins are given for wrong_questions > 2

    def total_coins(self):
        return self.coins

# Example Usage:
coins_manager = AlgoUCoins()

# Simulate completing assignments
for _ in range(4):  # 4 assignments
    for _ in range(5):  # 5 questions per assignment
        coins_manager.complete_question_assignment()
    coins_manager.complete_assignment()  # Complete each assignment after all questions

coins_manager.complete_all_assignments()  # Complete all assignments

# Simulate contest
for _ in range(6):  # Attempting all contest questions
    coins_manager.attempt_question_contest(correct=True, submission_attempts=1)  # Assuming all are correct on the second attempt

coins_manager.complete_contest() 

# Calculate total coins collected
total_collected_coins = coins_manager.total_coins()  

print(f'Total coins collected: {total_collected_coins}')
